name: devVM
on:
  workflow_dispatch:

jobs:
  init-vm:
    name: Run VM
    runs-on: ubuntu-22.04

    steps:
      - name: Dump context
        run: |
          echo '::group::Dump GitHub context'
          echo '${{ toJSON(github) }}'
          echo '::endgroup::'
          echo '::group::Dump job context'
          echo '${{ toJSON(job) }}'
          echo '::endgroup::'
          echo '::group::Dump steps context'
          echo '${{ toJSON(steps) }}'
          echo '::endgroup::'
          echo '::group::Dump runner context'
          echo '${{ toJSON(runner) }}'
          echo '::endgroup::'
          echo '::group::Dump strategy context'
          echo '${{ toJSON(strategy) }}'
          echo '::endgroup::'
          echo '::group::Dump matrix context'
          echo '${{ toJSON(matrix) }}'
          echo '::endgroup::'
        if: false

      - name: Install
        run: |
          sudo apt-get update && \
          sudo apt-get install bison ca-certificates ccache cmake cmake-curses-gui dh-python doxygen expect flex flip gdal-bin git graphviz grass-dev libexiv2-dev libexpat1-dev libfcgi-dev libgdal-dev libgeos-dev libgsl-dev libpdal-dev libpq-dev libproj-dev libprotobuf-dev libqca-qt5-2-dev libqca-qt5-2-plugins libqscintilla2-qt5-dev libqt5opengl5-dev libqt5serialport5-dev libqt5sql5-sqlite libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libqwt-qt5-dev libspatialindex-dev libspatialite-dev libsqlite3-dev libsqlite3-mod-spatialite libyaml-tiny-perl libzip-dev libzstd-dev lighttpd locales ninja-build ocl-icd-opencl-dev opencl-headers pandoc pdal pkg-config poppler-utils protobuf-compiler pyqt5-dev pyqt5-dev-tools pyqt5.qsci-dev python3-all-dev python3-autopep8 python3-dateutil python3-dev python3-future python3-gdal python3-httplib2 python3-jinja2 python3-lxml python3-markupsafe python3-mock python3-nose2 python3-owslib python3-plotly python3-psycopg2 python3-pygments python3-pyproj python3-pyqt5 python3-pyqt5.qsci python3-pyqt5.qtpositioning python3-pyqt5.qtsql python3-pyqt5.qtsvg python3-pyqt5.qtwebkit python3-pyqtbuild python3-requests python3-sip python3-six python3-termcolor python3-tz python3-yaml qt3d-assimpsceneimport-plugin qt3d-defaultgeometryloader-plugin qt3d-gltfsceneio-plugin qt3d-scene2d-plugin qt3d5-dev qtbase5-dev qtbase5-private-dev qtkeychain-qt5-dev qtpositioning5-dev qttools5-dev qttools5-dev-tools saga sip-tools spawn-fcgi xauth xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable xvfb
#          sudo apt-get install bison ca-certificates ccache cmake cmake-curses-gui dh-python doxygen expect flex flip gdal-bin git graphviz grass-dev libexiv2-dev libexpat1-dev libfcgi-dev libgdal-dev libgeos-dev libgsl-dev libpdal-dev libpq-dev libproj-dev libprotobuf-dev libqca-qt5-2-dev libqca-qt5-2-plugins libqscintilla2-qt5-dev libqt5opengl5-dev libqt5serialport5-dev libqt5sql5-sqlite libqt5svg5-dev libqt5webkit5-dev libqt5xmlpatterns5-dev libqwt-qt5-dev libspatialindex-dev libspatialite-dev libsqlite3-dev libsqlite3-mod-spatialite libyaml-tiny-perl libzip-dev libzstd-dev lighttpd locales ninja-build ocl-icd-opencl-dev opencl-headers pandoc pdal pkg-config poppler-utils protobuf-compiler pyqt5-dev pyqt5-dev-tools pyqt5.qsci-dev python3-all-dev python3-autopep8 python3-dateutil python3-dev python3-future python3-gdal python3-httplib2 python3-jinja2 python3-lxml python3-markupsafe python3-mock python3-nose2 python3-owslib python3-plotly python3-psycopg2 python3-pygments python3-pyproj python3-pyqt5 python3-pyqt5.qsci python3-pyqt5.qtpositioning python3-pyqt5.qtsql python3-pyqt5.qtsvg python3-pyqt5.qtwebkit python3-requests python3-sip python3-sip-dev python3-six python3-termcolor python3-tz python3-yaml qt3d-assimpsceneimport-plugin qt3d-defaultgeometryloader-plugin qt3d-gltfsceneio-plugin qt3d-scene2d-plugin qt3d5-dev qt5-default qt5keychain-dev qtbase5-dev qtbase5-private-dev qtpositioning5-dev qttools5-dev qttools5-dev-tools saga spawn-fcgi xauth xfonts-100dpi xfonts-75dpi xfonts-base xfonts-scalable xvfb

      - name: Install GUI
        run: |
          sudo apt-get update && \
          sudo apt-get install -y xfce4 tightvncserver
          wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
          sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
          sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
          rm -f packages.microsoft.gpg
          sudo apt update && sudo apt install code
        if: false
#        if: github.event_name == 'workflow_dispatch'
#          sudo apt-get install -y ubuntu-desktop xorgxrdp xrdp qtcreator
#          sudo systemctl enable --now xrdp
#          sudo ufw allow from any to any port 3389 proto tcp

      - name: Clone
        run: |
          pwd
          mkdir -p /home/runner/.cache/ccache
          ccache -M 6G
          mkdir -p ${HOME}/dev/cpp
          cd ${HOME}/dev/cpp
          git clone -b master --depth 1 --single-branch https://github.com/MorriganR/QGIS.git

      - uses: actions/cache@v3
        with:
          path: /home/runner/.cache/ccache
          key: ${{ runner.os }}-${{ github.event_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ github.event_name }}
            ${{ runner.os }}-

      - name: Start remote debug
        env:
          TEMP_HOST: ${{ secrets.TEMP_HOST }}
          TEMP_PORT: ${{ secrets.TEMP_PORT }}
          TEMP_USER: ${{ secrets.TEMP_USER }}
          TEMP_SERT: ${{ secrets.TEMP_SERT }}
          TEMP_SERT_LOCAL: ${{ secrets.TEMP_SERT_LOCAL }}
        run: |
          whoami > ssh_user
          cat ssh_user
          echo -e "$TEMP_SERT_LOCAL\n$TEMP_SERT_LOCAL" | sudo passwd $(cat ssh_user)
          nohup sudo sshpass -p $TEMP_SERT ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            -R 48422:0.0.0.0:22 \
            -R 59018:0.0.0.0:5901 \
            -R 33898:0.0.0.0:3389 \
            $TEMP_HOST -p $TEMP_PORT -l $TEMP_USER \
            ping 127.0.0.1 -i 30 \
            2>/dev/null &
        if: false

      - name: Make
        run: |
          cd ${HOME}/dev/cpp/QGIS
          ccache -s -v || ccache -s
          ccache -z
          echo "::group::config"
          /usr/local/bin/cmake -S /home/runner/dev/cpp/QGIS -B /home/runner/dev/cpp/build-QGIS-Desktop-Debug \
            -GNinja \
            -DCMAKE_BUILD_TYPE:STRING=Debug \
            -DCMAKE_PROJECT_INCLUDE_BEFORE:PATH=/usr/share/qtcreator/package-manager/auto-setup.cmake \
            -DQT_QMAKE_EXECUTABLE:STRING=/usr/lib/qt5/bin/qmake \
            -DCMAKE_PREFIX_PATH:STRING=/usr \
            -DCMAKE_C_COMPILER:STRING=/usr/lib/ccache/gcc \
            -DCMAKE_CXX_COMPILER:STRING=/usr/lib/ccache/g++ \
            -DC:STRING=/usr/lib/ccache/gcc \
            -DCXX:STRING=/usr/lib/ccache/g++
          echo "::endgroup::"
          echo "::group::make"
          /usr/local/bin/cmake --build /home/runner/dev/cpp/build-QGIS-Desktop-Debug --target all -j2
          echo "::endgroup::"
          ccache -s -v || ccache -s
          df -h
#        if: github.event_name != 'workflow_dispatch'

      - name: Waiting stop
        run: |
          while ! cat ${HOME}/stop &> /dev/null
          do
            printf "."
            sleep 5
          done
        if: false
#        if: github.event_name == 'workflow_dispatch'
